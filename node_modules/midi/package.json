{
  "_args": [
    [
      {
        "raw": "midi@git+https://github.com/paulrosen/MIDI.js.git#abcjs",
        "scope": null,
        "escapedName": "midi",
        "name": "midi",
        "rawSpec": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
        "spec": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:paulrosen/MIDI.js.git#abcjs",
          "sshUrl": "git+ssh://git@github.com/paulrosen/MIDI.js.git#abcjs",
          "httpsUrl": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
          "gitUrl": "git://github.com/paulrosen/MIDI.js.git#abcjs",
          "shortcut": "github:paulrosen/MIDI.js#abcjs",
          "directUrl": "https://raw.githubusercontent.com/paulrosen/MIDI.js/abcjs/package.json"
        }
      },
      "E:\\Folders\\Git\\web-midi\\node_modules\\abcjs"
    ]
  ],
  "_from": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
  "_id": "midi@0.4.2",
  "_inCache": true,
  "_location": "/midi",
  "_phantomChildren": {},
  "_requested": {
    "raw": "midi@git+https://github.com/paulrosen/MIDI.js.git#abcjs",
    "scope": null,
    "escapedName": "midi",
    "name": "midi",
    "rawSpec": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
    "spec": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:paulrosen/MIDI.js.git#abcjs",
      "sshUrl": "git+ssh://git@github.com/paulrosen/MIDI.js.git#abcjs",
      "httpsUrl": "git+https://github.com/paulrosen/MIDI.js.git#abcjs",
      "gitUrl": "git://github.com/paulrosen/MIDI.js.git#abcjs",
      "shortcut": "github:paulrosen/MIDI.js#abcjs",
      "directUrl": "https://raw.githubusercontent.com/paulrosen/MIDI.js/abcjs/package.json"
    }
  },
  "_requiredBy": [
    "/abcjs"
  ],
  "_resolved": "git+https://github.com/paulrosen/MIDI.js.git#e593ffef81a0350f99448e3ab8111957145ff6b2",
  "_shasum": "bd0f888a5557d7784c4960e50859ed79ebed16a8",
  "_shrinkwrap": null,
  "_spec": "midi@git+https://github.com/paulrosen/MIDI.js.git#abcjs",
  "_where": "E:\\Folders\\Git\\web-midi\\node_modules\\abcjs",
  "author": {
    "name": "Michael Deal"
  },
  "bugs": {
    "url": "https://github.com/mudcube/MIDI.js/issues"
  },
  "contributors": [
    {
      "name": "Sergi Mansilla"
    },
    {
      "name": "Daniel van der Meer"
    },
    {
      "name": "Mohit Muthanna"
    },
    {
      "name": "Pete Otaqui"
    }
  ],
  "dependencies": {},
  "description": "Library to assist in creating HTML5 MIDI apps.",
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-concat": "^2.5.2",
    "gulp-if": "^1.2.5",
    "gulp-minify-css": "^1.1.6",
    "gulp-rename": "^1.2.2",
    "gulp-uglify": "^1.2.0",
    "gulp-useref": "^1.2.0"
  },
  "gitHead": "e593ffef81a0350f99448e3ab8111957145ff6b2",
  "homepage": "https://github.com/mudcube/MIDI.js#readme",
  "license": "MIT",
  "main": "./build/MIDI.min.js",
  "name": "midi",
  "optionalDependencies": {},
  "readme": "## Code examples - from the repo\r\n\r\n* [Basic](https://mudcu.be/github/midi-js/Basic.html) - the most basic implementation.\r\n* [MIDIPlayer](https://mudcu.be/github/midi-js/MIDIPlayer.html) - how to parse MIDI files, and interact with the data stream.\r\n* [MultipleInstruments](https://mudcu.be/github/midi-js/MultipleInstruments.html) - synth drum and piano playing together\r\n* [WhitneyMusicBox](https://mudcu.be/github/midi-js/WhitneyMusicBox.html) - a audio/visual experiment by Jim Bumgardner\r\n\r\n## Demos\r\n\r\n* [3D Piano Player w/ Three.js](http://www.rgba.org/r3d/3d-piano-player/) by Borja Morales @reality3d\r\n* [Brite Lite](http://labs.uxmonk.com/brite-lite/) by Daniel Christopher @uxmonk\r\n* [Color Piano](http://mudcu.be/piano) by Michael Deal @mudcube\r\n* [Euphony 3D Piano](http://qiao.github.com/euphony/) by Xueqiao Xu @qiao\r\n* [Gbloink!](http://gbloink.com/alpha/) by Phil Jones\r\n\r\n## Related projects\r\n* [MIDI-Player for Polymer](https://github.com/miztroh/midi-player)\r\n* [Piano Typewriter](http://www.picatino.com/piano_typewriter/) by Andrew Levine\r\n* [Ragamroll](http://online-compute.rhcloud.com/ragamroll/) by Mani Balasubramanian\r\n* [Simon Says](http://labs.uxmonk.com/simon-says/) by Daniel Christopher @uxmonk\r\n* [Spiral Keyboard](http://spiral.qet.me/) by Patrick Snels\r\n* [VexFlow](http://my.vexflow.com/articles/53) by Mohit Muthanna @11111110b\r\n\r\n## Related repositories\r\n\r\n* [MIDI Pictures](https://github.com/andruo11/midi-pictures): Pictures of the 128 standard instruments on MIDI piano keyboards\r\n* [MIDI Soundfonts](https://github.com/gleitz/midi-js-soundfonts): Pre-rendered General MIDI soundfonts that can be used immediately with MIDI.js\r\n\r\n## Generating Base64 Soundfonts\r\n\r\nThere is two generators for MIDI.js soundfonts:\r\n\r\n* NodeJS package for creating soundfonts from WAV files - by Patrick Wolleb\r\n* Ruby package for creating soundsfonts from SF2 files - by Mohit Muthanna\r\n\r\nTo dive in quickly Benjamin Gleitzman has created a package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts).\r\n\r\n## API\r\n\r\n### [MIDI.loadPlugin.js](./js/midi/loader.js) - Decides which framework is best to use\r\n\r\n```javascript\r\n// interface to download soundfont, then execute callback;\r\nMIDI.loadPlugin(onsuccess);\r\n// simple example to get started;\r\nMIDI.loadPlugin({\r\n    instrument: \"acoustic_grand_piano\", // or the instrument code 1 (aka the default)\r\n    instruments: [ \"acoustic_grand_piano\", \"acoustic_guitar_nylon\" ], // or multiple instruments\r\n    onsuccess: function() { }\r\n});\r\n```\r\n\r\n### [MIDI.Plugin.js](./js/midi/plugin.webaudio.js) - Controls MIDI output\r\n\r\n```javascript\r\nMIDI.noteOn(channel, note, velocity, delay);\r\nMIDI.noteOff(channel, note, delay);\r\nMIDI.chordOn(channel, [note, note, note], velocity, delay);\r\nMIDI.chordOff(channel, [note, note, note], delay);\r\nMIDI.keyToNote = object; // A0 => 21\r\nMIDI.noteToKey = object; // 21 => A0\r\n```\r\n\r\n### [MIDI.Player.js](./js/midi/player.js) - Plays MIDI stream\r\n\r\n```javascript\r\nMIDI.Player.currentTime = integer; // time we are at now within the song.\r\nMIDI.Player.endTime = integer; // time when song ends.\r\nMIDI.Player.playing = boolean; // are we playing? yes or no.\r\nMIDI.Player.loadFile(file, onsuccess); // load .MIDI from base64 or binary XML request.\r\nMIDI.Player.start(); // start the MIDI track (you can put this in the loadFile callback)\r\nMIDI.Player.resume(); // resume the MIDI track from pause.\r\nMIDI.Player.pause(); // pause the MIDI track.\r\nMIDI.Player.stop(); // stops all audio being played, and resets currentTime to 0.\r\n```\r\n\r\n### Listener for when notes are played\r\n\r\n```javascript\r\nMIDI.Player.removeListener(); // removes current listener.\r\nMIDI.Player.addListener(function(data) { // set it to your own function!\r\n    var now = data.now; // where we are now\r\n    var end = data.end; // time when song ends\r\n    var channel = data.channel; // channel note is playing on\r\n    var message = data.message; // 128 is noteOff, 144 is noteOn\r\n    var note = data.note; // the note\r\n    var velocity = data.velocity; // the velocity of the note\r\n    // then do whatever you want with the information!\r\n});\r\n```\r\n\r\n### Smooth animation interpolating between onMidiEvent calls\r\n\r\n```javascript\r\nMIDI.Player.clearAnimation(); // clears current animation.\r\nMIDI.Player.setAnimation(function(data) {\r\n    var now = data.now; // where we are now\r\n    var end = data.end; // time when song ends\r\n    var events = data.events; // all the notes currently being processed\r\n    // then do what you want with the information!\r\n});\r\n```\r\n\r\n### Effects available for WebAudioContext via Tuna.js\r\n\r\n```javascript\r\nMIDI.setEffects([\r\n        {\r\n \t\ttype: \"MoogFilter\",\r\n\t\tbufferSize: 4096,\r\n\t\tbypass: false,\r\n\t\tcutoff: 0.065,\r\n\t\tresonance: 3.5\r\n\t},\r\n\t{\r\n\t\ttype: \"Bitcrusher\",\r\n\t\tbits: 4,\r\n\t\tbufferSize: 4096,\r\n\t\tbypass: false,\r\n\t\tnormfreq: 0.1\r\n\t},\r\n\t{\r\n\t\ttype: \"Phaser\",\r\n\t\trate: 1.2, // 0.01 to 8 is a decent range, but higher values are possible\r\n\t\tdepth: 0.3, // 0 to 1\r\n\t\tfeedback: 0.2, // 0 to 1+\r\n\t\tstereoPhase: 30, // 0 to 180\r\n\t\tbaseModulationFrequency: 700, // 500 to 1500\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Chorus\",\r\n\t\trate: 1.5,\r\n\t\tfeedback: 0.2,\r\n\t\tdelay: 0.0045,\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Delay\",\r\n\t\tfeedback: 0.45, // 0 to 1+\r\n\t\tdelayTime: 150, // how many milliseconds should the wet signal be delayed? \r\n\t\twetLevel: 0.25, // 0 to 1+\r\n\t\tdryLevel: 1, // 0 to 1+\r\n\t\tcutoff: 20, // cutoff frequency of the built in highpass-filter. 20 to 22050\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Overdrive\",\r\n\t\toutputGain: 0.5, // 0 to 1+\r\n\t\tdrive: 0.7, // 0 to 1\r\n\t\tcurveAmount: 1, // 0 to 1\r\n\t\talgorithmIndex: 0, // 0 to 5, selects one of our drive algorithms\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Compressor\",\r\n\t\tthreshold: 0.5, // -100 to 0\r\n\t\tmakeupGain: 1, // 0 and up\r\n\t\tattack: 1, // 0 to 1000\r\n\t\trelease: 0, // 0 to 3000\r\n\t\tratio: 4, // 1 to 20\r\n\t\tknee: 5, // 0 to 40\r\n\t\tautomakeup: true, // true/false\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Convolver\",\r\n\t\thighCut: 22050, // 20 to 22050\r\n\t\tlowCut: 20, // 20 to 22050\r\n\t\tdryLevel: 1, // 0 to 1+\r\n\t\twetLevel: 1, // 0 to 1+\r\n\t\tlevel: 1, // 0 to 1+, adjusts total output of both wet and dry\r\n\t\timpulse: \"./inc/tuna/impulses/impulse_rev.wav\", // the path to your impulse response\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Filter\",\r\n\t\tfrequency: 20, // 20 to 22050\r\n\t\tQ: 1, // 0.001 to 100\r\n\t\tgain: 0, // -40 to 40\r\n\t\tbypass: 1, // 0 to 1+\r\n\t\tfilterType: 0 // 0 to 7, corresponds to the filter types in the native filter node: lowpass, highpass, bandpass, lowshelf, highshelf, peaking, notch, allpass in that order\r\n\t}, {\r\n\t\ttype: \"Cabinet\",\r\n\t\tmakeupGain: 1, // 0 to 20\r\n\t\timpulsePath: \"./inc/tuna/impulses/impulse_guitar.wav\", // path to your speaker impulse\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"Tremolo\",\r\n\t\tintensity: 0.3, // 0 to 1\r\n\t\trate: 0.1, // 0.001 to 8\r\n\t\tstereoPhase: 0, // 0 to 180\r\n\t\tbypass: 0\r\n\t}, {\r\n\t\ttype: \"WahWah\",\r\n\t\tautomode: true, // true/false\r\n\t\tbaseFrequency: 0.5, // 0 to 1\r\n\t\texcursionOctaves: 2, // 1 to 6\r\n\t\tsweep: 0.2, // 0 to 1\r\n\t\tresonance: 10, // 1 to 100\r\n\t\tsensitivity: 0.5, // -1 to 1\r\n\t\tbypass: 0\r\n\t}\r\n]);\r\n```\r\n\r\n## Libraries\r\n\r\n* [colorspace.js](./examples/inc/colorspace.js): Color conversions, music isn&rsquo;t complete without!\r\n<pre>Color.Space(0xff0000, \"HEX>RGB>HSL\");</pre>\r\n* [dom_request_script.js](./js/util/dom_request_script.js): Loads scripts in synchronously, or asynchronously.\r\n<pre>DOMLoader.script.add(src, onsuccess);</pre>\r\n* [dom_request_xhr.js](./js/util/dom_request_xhr.js): Cross-browser XMLHttpd request.\r\n<pre>DOMLoader.sendRequest(src, onsuccess);</pre>\r\n* [synesthesia.js](./js/midi/synesthesia.js): Note-to-color mappings (from Isaac Newton onwards).\r\n\r\n### Many thanks to the authors of these libraries\r\n\r\n* [Web MIDI API](http://webaudio.github.io/web-midi-api/): W3C proposal by Jussi Kalliokoski & Chris Wilson\r\n* [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html): W3C proposal by Chris Rogers\r\n* [&lt;audio&gt;](http://dev.w3.org/html5/spec/Overview.html): HTML5 specs\r\n* Flash package: [SoundManager2](http://www.schillmania.com/projects/soundmanager2/) by [Scott Schiller](http://schillmania.com)\r\n* [jasmid](https://github.com/gasman/jasmid): Reads MIDI file byte-code, and translats into a Javascript array.\r\n* [base642binary.js](http://blog.danguer.com/2011/10/24/base64-binary-decoding-in-javascript/): Cleans up XML base64-requests for Web Audio API.\r\n\r\n## Similar projects\r\n* [Wild Web MIDI](http://zz85.github.io/wild-web-midi/) by [@BlurSpline](https://twitter.com/BlurSpline)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mudcube/MIDI.js.git"
  },
  "version": "0.4.2"
}
